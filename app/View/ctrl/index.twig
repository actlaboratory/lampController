{% set page_title = "コントローラ" %}
{% set page_description = "LAMPのコントロールページです。" %}

{#レイアウト継承#}
{% extends "layout/layout.twig" %}

{# スタイルシートの追加 #}
{% block header_scripts_add %}
{% endblock %}

{# ページ本文 #}
{% block page_content %}

    <div class="container-fluid my-2">
        {% if session.guestId==null %}
            <div class="text-right my-1">ようこそ、{{ userDisplayName }}さん。</div>
        {% else %}
            <div class="text-right my-1">ようこそ、{{ userDisplayName }}のゲストさん。</div>
        {% endif %}
        
        <div class="row">
            {# 操作エリア　#}
            <div class="col-lg-3 col-md-5 col-sm-6 col-12 mx-auto px-1">
                <div class="container fluid">
                    <div class="row bg-info justify-content-center">
                        <h2 id="softwareStatus" class="h2 text-light my-auto">読み込み中</h2>
                    </div>
                    {% if session.guestId==NULL %}
                        <form method="post" autocomplete="off">
                            <div class="row my-1">
                                <div class="col-9 col-md-10 mx-0 px-0 my-auto"><select class="w-100" name="defaultLamp" required>
                                    <option value="">LAMPを選択</option>
                                    {% for s in softwareList %}
                                        {% if session.defaultLamp == s.id %}
                                            <option value="{{ s.id }}" selected>{{ s.display_name }}</option>
                                        {% else %}
                                            <option value="{{ s.id }}">{{ s.display_name }}</option>
                                        {% endif %}
                                    {% endfor %}
                                </select></div>
                                <div class="col mx-0 px-0 text-right"><input type="submit" class="button btn-dark text-white my-0 mx-0 px-1 py-0" value="切替"></div>
                            </div>
                        </form>
                    {% else %}
                        <div class="row my-1"><div class="col-12 text-center">
                            {% for s in softwareList %}
                                {% if session.defaultLamp == s.id %}
                                    {{ s.display_name }}
                                {% endif %}
                            {% endfor %}
                        </div></div>
                    {% endif %}
                    <div class="row justify-content-center mt-1 mb-2">
                        <button type="button" id="playButton" class="col-12 btn btn-dark my-2 mx-auto" onclick="operation('play');">再生 / 一時停止</button>
                    </div>
                    <div class="row my-2 justify-content-center">
                        <div class="col-4 px-1 text-center"><button type="button" id="previousButton" class="btn btn-dark mx-auto px-4 px-sm-3" onclick="operation('previous');">前へ</button></div>
                        <div class="col-4 px-1 text-center"><button type="button" id="stopButton" class="btn btn-dark mx-auto px-4 px-sm-3" onclick="operation('stop');">停止</button></div>
                        <div class="col-4 px-1 text-center"><button type="button" id="nextButton" class="btn btn-dark mx-auto px-4 px-sm-3" onclick="operation('next');">次へ</button></div>
                    </div>
                    <div class="row bg-primary justify-content-center mt-3 mb-" aria-hidden="true">
                        <span class="text-light py-1">音量</span>
                    </div>
                    <div class="row bg-primary mt-0 mb-3 justify-content-center">
                        <button type="button" id="volumeDownButton" class="col-5 btn btn-dark mx-2" aria-label="音量を下げる" onclick="operation('volumeDown');">DOWN</button>
                        <button type="button" id="volumeUpButton" class="col-5 btn btn-dark mx-2" aria-label="音量を上げる" onclick="operation('volumeUp');">UP</button>
                    </div>
                    
                    {# 再生モード #}
                    <div class="row bg-info justify-content-center mt-4 mb-1">
                        <h3 class="h2 text-light my-auto">再生モード</h3>
                    </div>
                    <div class="row mt-2 mb-1 px-2">
                        <div class="col-7 px-0"><button type="button" id="repeatLoopButton" class="btn btn-dark mx-auto px-4 px-sm-1" onclick="operation('repeatLoop');">リピート/ループ</button></div>
                        <div class="col-5 px-0 text-right"><button type="button" id="shuffleButton" class="btn btn-dark mx-auto px-4 px-sm-1" onclick="operation('shuffle');">シャッフル</button></div>
                    </div>
                    <div class="row">
                        <div class="col-7">リピート / ループ</div>
                        <div class="col-5" id="repeatLoopStatus"></div>
                    </div>
                    <div class="row">
                        <div class="col-7">シャッフル</div>
                        <div class="col-5" id="shuffleStatus"></div>
                    </div>
                    <div class="row justify-content-center my-3">
                        <a role="button" class="col-11 btn btn-dark mx-1" href="{{ get_base_path() }}/ctrl/file">ファイル一覧へ</a>
                    </div>
                </div>
            </div>
            
            {# 情報表示エリア #}
            <div class="col-lg-9 col-md-7 col-sm-6 col-12 mx-auto bg-light">
                <h2 class="h2 text-center text-light bg-info mt-auto mb-3">情報</h2>
                <div class="container-fluid">
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>タイトル</p></div>
                        <div class="col-flex"><p id="titleInfo"></p></div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>アーティスト</p></div>
                        <div class="col-flex"><p id="artistInfo"></p></div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>アルバム</p></div>
                        <div class="col-flex"><p id="albumInfo"></p></div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>アルバムアーティスト</p></div>
                        <div class="col-flex"><p id="albumArtistInfo"></p></div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>時間</p></div>
                        <div class="col-flex"><p id="timeInfo"></p></div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-flex mr-3"><p>場所</p></div>
                        <div class="col-flex"><p id="pathInfo"></p></div>
                    </div>
                </div>
            </div>
            
            {# 操作パネルエリア　#}
        </div>
    </div>

{% autoescape 'js' %}
    <script>
        var basePath = "{{ get_base_path() }}";
        var sessionId = "{{ session.id }}";
        {% if session.defaultLamp matches '/^\\d+$/' %}
            var softwareId = {{ session.defaultLamp }};
        {% else %}
            var softwareId = null;
        {% endif %}
        
        {# ビューのリアルタイム更新 #}
        function refreshView(){
            {# エレメントを取得 #}
            var titleInfo = document.getElementById("titleInfo");
            var artistInfo = document.getElementById("artistInfo");
            var albumInfo = document.getElementById("albumInfo");
            var albumArtistInfo = document.getElementById("albumArtistInfo");
            var timeInfo = document.getElementById("timeInfo");
            var pathInfo = document.getElementById("pathInfo");
            var softwareStatus = document.getElementById("softwareStatus");
            var repeatLoopStatus = document.getElementById("repeatLoopStatus");
            var shuffleStatus = document.getElementById("shuffleStatus");
            
            {# JSONを送ってJSONをもらう #}
            var reqJson = JSON.stringify({
                "sessionId": "{{ session.id }}",
                "softwareId": softwareId
            });
            var xhr = new XMLHttpRequest;
            xhr.onload = function(){
                var res = xhr.responseText;
                if (res.length>0){
                    var jsonData = JSON.parse(res);
                    setText(titleInfo, jsonData.title);
                    setText(artistInfo, jsonData.artist);
                    setText(albumInfo, jsonData.album);
                    setText(albumArtistInfo, jsonData.albumArtist);
                    setText(pathInfo, jsonData.path);
                    setText(timeInfo, seconds2string(jsonData.playbackTime) + " / " + seconds2string(jsonData.length))
                    if (jsonData.status == "playing"){
                        setText(softwareStatus, "再生中");
                    } else if (jsonData.status == "paused"){
                        setText(softwareStatus, "一時停止中");
                    } else if (jsonData.status == "stopped"){
                        setText(softwareStatus, "停止中");
                    } else{
                        setText(softwareStatus, "未接続");
                    }
                    if (jsonData.repeatLoop == "off"){
                        setText(repeatLoopStatus, "オフ");
                    } else if (jsonData.repeatLoop == "repeat"){
                        setText(repeatLoopStatus, "リピート");
                    } else if (jsonData.repeatLoop == "loop"){
                        setText(repeatLoopStatus, "ループ");
                    } else{
                        setText(repeatLoopStatus, "");
                    }
                    if (jsonData.shuffle == "off"){
                        setText(shuffleStatus, "オフ");
                    } else if (jsonData.shuffle == "on"){
                        setText(shuffleStatus, "オン");
                    } else{
                        setText(shuffleStatus, "");
                    }

                }
            };
            xhr.open('post', "{{ get_base_path() }}/ctrl/getstatus", true);    //(1)
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(reqJson);
        };

        function setText(element, text){
            if (element.innerText != text){
                element.innerText = text;
            }
        }

        function seconds2string(sec){
            if (sec < 0){
                return 0;
            }
            sec = Math.floor(sec);
            var hours = Math.floor(sec / 360);
            var minutes = Math.floor((sec % 360) / 60);
            var seconds = sec % 60;
            return hours + ":" + ("00" + minutes).slice(-2) + ":" + ("00" + seconds).slice(-2)
        }

        {# 読み込み時に実行 #}
        window.onload = setInterval(refreshView, 1000);
    </script>

    <script src="./scripts/operation.js"></script>
{% endautoescape %}


{% endblock %}

{# フッダ以降に追加する内容 #}
{% block footer_scripts_add %}
{% endblock %}

